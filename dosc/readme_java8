一、Java8新特性简介
1、速度快
2、代码更少（增加了新的语法Lambda表达式）
3、强大的StreamAPI
4、便于运行
5、最大化减少空指针异常Optional


二、主要内容(核心：Lambda表达式和StreamAPI）
1、Lambda表达式
    为什么使用Lambda表达式：
        Lambda是一个匿名函数，我们可以把Lambada表达式理解为是一段可以传递的代码（将代码像数据一样进行传递）。可以写出更简洁、更灵活的代码。作为一种更紧凑的代码
    风格。使Java的语言表达能力得到了提升。

2、函数式接口

3、方法引用与构造器引用

4、Stream API
    Java8中有两个最为重要的改变。第一个是Lambda表达式；另一个则是Stream API（java.util.stream.*）。

    Stream是Java8中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用StreamAPI对集合数据进行操作，就
    类似于使用SQL执行的数据库查询。也可以使用StreamAPI来并行执行操作。简而言之，StreamAPI提供了一种高效且易于使用的处理数据的方式。

    什么是Stream??流到底是什么呢？是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。"集合讲的是数据，流讲的是计算！"
    注意：
        （1）Stream自己不会存储元素。
        （2）Stream不会改变源对象。相反。他们会返回一个持有结果的新Stream。
        （3）Stream操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。

    Stream的操作三个步骤：
        （1）创建Stream：一个数据源（如：集合、数组）获取一个流
        （2）中间操作：一个中间操作链，对数据源的数据进行处理
        （3）终止操作（终端操作）：一个终止操作，执行中间操作链，并产生结果。


5、接口中的默认方法与静态方法
    Java8中允许接口中包含具有具体实现的方法，该方法为"默认方法"，默认方法使用default关键字修饰。

    接口默认方法的"类优先"原则：
        若一个接口中定义了一个默认方法，而另一个父类或接口中又定义了一个同名的方法时：
        1、选择父类中的方法，如果一个父类提供了具体的实现，那么接口中具有相同名称和参数的默认方法会被忽略。
        2、接口冲突。如果一个父接口提供了一个默认的方法，而另一个接口也提供了一个具有相同名称的参数列表的方法（不管方法是否是默认），那么必须覆盖该方法来解决冲突。

6、新时间日期API
    日期的操纵：
        1、TemporalAdjuster：时间校正器。有时我们可能需要获取例如：将日期调整到"下个周日"等操作。
        2、TemporalAdjusters:该类通过静态方法提供了大量的常用TemporalAdjuster的实现。

    时区的处理：
        Java8中加入了时区的支持，带时区的时间为分别为：zonedDate、ZonedTime、ZonedDateTime,其中每个时区都对应这ID，地区ID都为"{区域}/{城市}"的格式，例如：Asia/Shanghai等。
        ZoneId:该类中包含了所有的时区信息; of(id)：用指定的时区信息获取ZoneId对象
7、其他新特性
    Java8对注解处理提供了两点改进：可重复的注解及可用于类型的注解

8、Optional类
    Optional<T> 类（java.util.optional）是一个容器类，代表一个值存在或不存在，原来用null表示一个值不存在，现在Optional可以更好的表达这个概念。并且可以避免空指针异常。
    常用方法：
        Optional.of(T t) :  创建一个Optional实例
        Optional.empty() :  创建一个空的Optional实例
        Optional.ofNullable(T t) : 若t不为null，创建Optional实例，否则创建空实例
        isPresent() : 判断是否包含值
        orElse(T t) : 如果调用对象包含值，返回该值，否则返回t
        orElseGet(Supplier s) : 如果调用对象包含值，返回该值，否则返回 s 获取的值
        map(Function f) : 如果有值对其处理，并返回处理后的Optional，否则返回Optional.empty()
        flatMap(Function mapper) : 与map类似，要求返回值必须是Optional